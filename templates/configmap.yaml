apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ include "thehive.templatesConfigMapName" . | quote }}
data:
  {{/*
  We will fill in secret values by replacing @@strings@@ with sed in an InitContainer.
  We will construct the trust store using another InitContainer.
  */}}
  # Avoid getting configuration, with secrets, catted out to
  # logs. That is a dev thing to do, not a prod thing to do.
  application.conf.tmpl: |
    include file("/etc/thehive/main.conf")
    include file("/etc/thehive/database.conf")
  {{/* this main.conf is used for either TheHive 3 or 4 */}}
  main.conf.tmpl: |
    play.http.secret.key = "@@PLAY_HTTP_SECRET_KEY@@"
    {{- include "thehive.wsCACertPlayWSConfig" . | nindent 4 }}
    {{- range $k, $v := .Values.extraHiveConfigurations }}
    include file("/etc/thehive/extra/{{ $k }}")
    {{- end }}

{{- if hasPrefix "3." .Values.image.tag }}
  database.conf.tmpl: |
   {{- if (or .Values.elasticsearch.eck.enabled .Values.elasticsearch.external.enabled) }}
   search {
     index = the_hive
     uri = "http{{- if .Values.elasticsearch.tls -}}s{{- end -}}://{{ include "thehive.elasticHostname" . }}:9200/"
     keepalive = 1m
     pagesize = 50
     nbshards = 5
     nbreplicas = 1
     settings {
       mapping.nested_fields.limit = 100
     }
     user = "@@ES_USERNAME@@"
     password = "@@ES_PASSWORD@@"

     {{- if .Values.elasticsearch.tls }}
     keyStore {
       path = {{ include "thehive.esTrustStore" . | quote }}
       type = "JKS"
       # There are no private keys to protect in this trust
       # store, so its password need not actually secure it.
       password = "changeit"
     }
     trustStore {
       path = {{ include "thehive.esTrustStore" . | quote }}
       type = "JKS"
       # There are no private keys to protect in this trust
       # store, so its password need not actually secure it.
       password = "changeit"
     }
     {{- end }}
   }
   {{- else }}
   {{- fail "You must enable some kind of Elasticsearch for TheHive 3" }}
   {{- end }}
{{- else }}{{- /* TheHive 4 database config */}}
  database.conf.tmpl: |
    db {
      provider: janusgraph
      janusgraph {
        storage {
          {{- if .Values.cassandra.enabled }}
            backend: cql
            # let the Kubernetes Service take care of it
            hostname: [ {{ include "thehive.cassandra.fullname" . | quote }} ]
            username: "@@CQL_USERNAME@@"
            password: "@@CQL_PASSWORD@@"
            cql {
              cluster-name: {{ .Values.cassandra.cluster.name }}
              keyspace: thehive
            }
          {{- else if .Values.localDatabaseStorage.pvc.enabled }}
            backend = berkeleyje
            directory = "/data/db"
          {{- else }}
          {{- fail "In database.conf.tmpl, must have some method of database storage" }}
          {{- end }}
        }
        index {
          {{- if (or .Values.elasticsearch.eck.enabled .Values.elasticsearch.external.enabled) }}
            search {
              backend: elasticsearch
              hostname: [ {{ include "thehive.elasticHostname" . | quote }} ]
              index-name: thehive
              elasticsearch {
                http {
                  auth {
                    type: basic
                    basic {
                      username: "@@ES_USERNAME@@"
                      password: "@@ES_PASSWORD@@"
                    }
                  }
                }
                {{- if .Values.elasticsearch.tls }}
                ssl {
                  enabled: true
                  truststore {
                    location: {{ include "thehive.esTrustStore" . | quote }}
                    # There are no private keys to protect in this trust
                    # store, so its password need not actually secure it.
                    password: changeit
                  }
                }
                {{- end }}
              }
            }
          {{- else if .Values.localIndexStorage.pvc.enabled }}
            search {
              backend = lucene
              directory = "/data/index"
            }
          {{- end }}
        }
      }
    }
    storage {
      {{- if .Values.attachmentStorage.pvc.enabled }}
        provider: localfs
        localfs.directory: "/data/files"
      {{- else }}
      {{- fail "In database.conf.tmpl, must have some method of attachment storage" }}
      {{- end }}
    }
{{- end }}
  logback.xml.tmpl: |
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration debug="false">
        <!-- stdout only, no colors -->
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%date [%level] from %logger in %thread - %message%n%xException</pattern>
            </encoder>
        </appender>
        <appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">
            <appender-ref ref="STDOUT"/>
        </appender>
        <logger name="play" level="INFO"/>
{{- if hasPrefix "3." .Values.image.tag }}
        <!-- Uncomment the next line to log search query sent to ElasticSearch -->
        <!-- logger name="org.elastic4play.database.DBFind" level="DEBUG" /-->

        <!-- Uncomment the next line to log debug information on Misp synchronization -->
        <!-- logger name="connectors.misp" level="DEBUG" /-->

        <!-- Uncomment the next lines to log debug information on stream -->
        <!--logger name="services.LocalStreamActor" level="DEBUG" /-->
        <!--logger name="services.StreamActor" level="DEBUG" /-->
{{- else }}{{/* TheHive 4 logging */}}
        <logger name="application" level="INFO"/>
        <!-- authentication debugging -->
        <!-- <logger name="org.thp.scalligraph.auth" level="TRACE"/> -->
        <!-- <logger name="services.UserSrv" level="TRACE" /> -->
        <!-- /authentication debugging -->
        <logger name="org.janusgraph.diskstorage.cql" level="TRACE"/>
        <logger name="com.gargoylesoftware.htmlunit.javascript" level="OFF"/>
{{- end }}
        <root level="INFO">
            <appender-ref ref="ASYNCSTDOUT"/>
        </root>
    </configuration>
    
